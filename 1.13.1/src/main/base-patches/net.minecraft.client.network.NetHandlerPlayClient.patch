--- net/minecraft/client/network/NetHandlerPlayClient.java
+++ net/minecraft/client/network/NetHandlerPlayClient.java
@@ -275,7 +275,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class NetHandlerPlayClient implements INetHandlerPlayClient {
+public class NetHandlerPlayClient implements INetHandlerPlayClient/* WDL >>> */, wdl.ducks.IBaseChangesApplied/* <<< WDL */ {
    private static final Logger LOGGER = LogManager.getLogger();
    /**
     * The NetworkManager instance used to communicate with the server, used to respond to various packets (primarilly
@@ -747,6 +747,10 @@
    }
 
    public void processChunkUnload(SPacketUnloadChunk packetIn) {
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleChunkUnload(this, this.world, packetIn);
+      /* <<< WDL */
+
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       int i = packetIn.getX();
       int j = packetIn.getZ();
@@ -773,6 +777,10 @@
     * Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination
     */
    public void onDisconnect(ITextComponent reason) {
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCDisconnect(this, reason);
+      /* <<< WDL */
+
       this.client.loadWorld((WorldClient)null);
       if (this.guiScreenServer != null) {
          if (this.guiScreenServer instanceof GuiScreenRealmsProxy) {
@@ -821,6 +829,10 @@
    public void handleChat(SPacketChat packetIn) {
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       this.client.ingameGUI.addChatMessage(packetIn.getType(), packetIn.getChatComponent());
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleChat(this, packetIn);
+      /* <<< WDL */
    }
 
    /**
@@ -1182,6 +1194,10 @@
    public void handleBlockAction(SPacketBlockAction packetIn) {
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       this.client.world.addBlockEvent(packetIn.getBlockPosition(), packetIn.getBlockType(), packetIn.getData1(), packetIn.getData2());
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleBlockAction(this, packetIn);
+      /* <<< WDL */
    }
 
    /**
@@ -1270,6 +1286,10 @@
 
       packetIn.setMapdataTo(mapdata);
       mapitemrenderer.updateMapTexture(mapdata);
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleMaps(this, packetIn);
+      /* <<< WDL */
    }
 
    public void handleEffect(SPacketEffect packetIn) {
@@ -1757,7 +1777,10 @@
             ((DebugRendererWorldGenAttempts)this.client.debugRenderer.worldGenAttempts).addAttempt(packetbuffer.readBlockPos(), packetbuffer.readFloat(), packetbuffer.readFloat(), packetbuffer.readFloat(), packetbuffer.readFloat(), packetbuffer.readFloat());
             LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
          } else {
-            LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            /* WDL >>> */
+            wdl.WDLHooks.onNHPCHandleCustomPayload(this, packetIn);
+            //LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            /* <<< WDL */
          }
       } finally {
          if (packetbuffer != null) {
