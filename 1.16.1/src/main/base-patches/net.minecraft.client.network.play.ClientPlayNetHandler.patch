--- net/minecraft/client/network/play/ClientPlayNetHandler.java
+++ net/minecraft/client/network/play/ClientPlayNetHandler.java
@@ -308,7 +308,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class ClientPlayNetHandler implements IClientPlayNetHandler {
+public class ClientPlayNetHandler implements IClientPlayNetHandler/* WDL >>> */, wdl.ducks.IBaseChangesApplied/* <<< WDL */ {
    private static final Logger LOGGER = LogManager.getLogger();
    /**
     * The NetworkManager instance used to communicate with the server, used to respond to various packets (primarilly
@@ -840,6 +840,10 @@
    }
 
    public void processChunkUnload(SUnloadChunkPacket packetIn) {
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleChunkUnload(this, this.world, packetIn);
+      /* <<< WDL */
+
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       int i = packetIn.getX();
       int j = packetIn.getZ();
@@ -874,6 +878,10 @@
     * Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination
     */
    public void onDisconnect(ITextComponent reason) {
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCDisconnect(this, reason);
+      /* <<< WDL */
+
       this.client.unloadWorld();
       if (this.guiScreenServer != null) {
          if (this.guiScreenServer instanceof RealmsScreen) {
@@ -927,6 +935,10 @@
    public void handleChat(SChatPacket packetIn) {
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       this.client.ingameGUI.addChatMessage(packetIn.getType(), packetIn.getChatComponent(), packetIn.func_240810_e_());
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleChat(this, packetIn);
+      /* <<< WDL */
    }
 
    /**
@@ -1325,6 +1337,10 @@
    public void handleBlockAction(SBlockActionPacket packetIn) {
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       this.client.world.addBlockEvent(packetIn.getBlockPosition(), packetIn.getBlockType(), packetIn.getData1(), packetIn.getData2());
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleBlockAction(this, packetIn);
+      /* <<< WDL */
    }
 
    /**
@@ -1415,6 +1431,10 @@
 
       packetIn.setMapdataTo(mapdata);
       mapitemrenderer.updateMapTexture(mapdata);
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleMaps(this, packetIn);
+      /* <<< WDL */
    }
 
    public void handleEffect(SPlaySoundEventPacket packetIn) {
@@ -2061,7 +2081,10 @@
             int l5 = packetbuffer.readInt();
             this.client.debugRenderer.field_229018_q_.func_229022_a_(blockpos8, l3, s10, l5);
          } else {
-            LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            /* WDL >>> */
+            wdl.WDLHooks.onNHPCHandleCustomPayload(this, packetIn);
+            // LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            /* <<< WDL */
          }
       } finally {
          if (packetbuffer != null) {
